import type { OverlayScrollbars } from 'overlayscrollbars';
import type { PartialOptions, EventListeners } from 'overlayscrollbars';
import type { ComponentPropsWithoutRef, ElementRef, ForwardedRef } from 'react';
export declare type OverlayScrollbarsComponentProps<T extends keyof JSX.IntrinsicElements = 'div'> = ComponentPropsWithoutRef<T> & {
    /** Tag of the root element. */
    element?: T;
    /** OverlayScrollbars options. */
    options?: PartialOptions | false | null;
    /** OverlayScrollbars events. */
    events?: EventListeners | false | null;
    /** Whether to defer the initialization to a point in time when the browser is idle. (or to the next frame if `window.requestIdleCallback` is not supported) */
    defer?: boolean | IdleRequestOptions;
};
export interface OverlayScrollbarsComponentRef<T extends keyof JSX.IntrinsicElements = 'div'> {
    /** Returns the OverlayScrollbars instance or null if not initialized. */
    osInstance(): OverlayScrollbars | null;
    /** Returns the root element. */
    getElement(): ElementRef<T> | null;
}
declare const OverlayScrollbarsComponent: <T extends keyof JSX.IntrinsicElements>(props: OverlayScrollbarsComponentProps<T>, ref: ForwardedRef<OverlayScrollbarsComponentRef<T>>) => JSX.Element;
declare const OverlayScrollbarsComponentForwardedRef: <T extends keyof JSX.IntrinsicElements>(props: import("react").PropsWithoutRef<import("react").ComponentProps<T>> & {
    /** Tag of the root element. */
    element?: T | undefined;
    /** OverlayScrollbars options. */
    options?: false | {
        paddingAbsolute?: boolean | undefined;
        showNativeOverlaidScrollbars?: boolean | undefined;
        update?: {
            elementEvents?: [elementSelector: string, eventNames: string][] | null | undefined;
            debounce?: number | [timeout: number, maxWait: number] | null | undefined;
            attributes?: string[] | null | undefined;
            ignoreMutation?: ((mutation: MutationRecord) => any) | null | undefined;
        } | undefined;
        overflow?: {
            x?: import("overlayscrollbars").OverflowBehavior | undefined;
            y?: import("overlayscrollbars").OverflowBehavior | undefined;
        } | undefined;
        scrollbars?: {
            theme?: string | null | undefined;
            visibility?: import("overlayscrollbars").ScrollbarsVisibilityBehavior | undefined;
            autoHide?: import("overlayscrollbars").ScrollbarsAutoHideBehavior | undefined;
            autoHideDelay?: number | undefined;
            dragScroll?: boolean | undefined;
            clickScroll?: boolean | undefined;
            pointers?: string[] | null | undefined;
        } | undefined;
    } | null | undefined;
    /** OverlayScrollbars events. */
    events?: false | {
        initialized?: ((instance: OverlayScrollbars) => void) | ((instance: OverlayScrollbars) => void)[] | null | undefined;
        updated?: ((instance: OverlayScrollbars, onUpdatedArgs: import("overlayscrollbars").OnUpdatedEventListenerArgs) => void) | ((instance: OverlayScrollbars, onUpdatedArgs: import("overlayscrollbars").OnUpdatedEventListenerArgs) => void)[] | null | undefined;
        destroyed?: ((instance: OverlayScrollbars, canceled: boolean) => void) | ((instance: OverlayScrollbars, canceled: boolean) => void)[] | null | undefined;
        scroll?: ((instance: OverlayScrollbars, event: Event) => void) | ((instance: OverlayScrollbars, event: Event) => void)[] | null | undefined;
    } | null | undefined;
    /** Whether to defer the initialization to a point in time when the browser is idle. (or to the next frame if `window.requestIdleCallback` is not supported) */
    defer?: boolean | IdleRequestOptions | undefined;
} & {
    ref?: ForwardedRef<OverlayScrollbarsComponentRef<T>> | undefined;
}) => ReturnType<typeof OverlayScrollbarsComponent>;
export { OverlayScrollbarsComponentForwardedRef as OverlayScrollbarsComponent };
